/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface StencilFormInput {
        /**
          * @default ''
         */
        "label": string;
        /**
          * @default 'text'
         */
        "type": string;
        "validationRegex"?: string | RegExp;
        /**
          * @default ''
         */
        "value": string;
    }
}
export interface StencilFormInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilFormInputElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLStencilFormInputElementEventMap {
        "valueChange": string;
        "validityChange": boolean;
    }
    interface HTMLStencilFormInputElement extends Components.StencilFormInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilFormInputElementEventMap>(type: K, listener: (this: HTMLStencilFormInputElement, ev: StencilFormInputCustomEvent<HTMLStencilFormInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilFormInputElementEventMap>(type: K, listener: (this: HTMLStencilFormInputElement, ev: StencilFormInputCustomEvent<HTMLStencilFormInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilFormInputElement: {
        prototype: HTMLStencilFormInputElement;
        new (): HTMLStencilFormInputElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "stencil-form-input": HTMLStencilFormInputElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface StencilFormInput {
        /**
          * @default ''
         */
        "label"?: string;
        "onValidityChange"?: (event: StencilFormInputCustomEvent<boolean>) => void;
        "onValueChange"?: (event: StencilFormInputCustomEvent<string>) => void;
        /**
          * @default 'text'
         */
        "type"?: string;
        "validationRegex"?: string | RegExp;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "stencil-form-input": StencilFormInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "stencil-form-input": LocalJSX.StencilFormInput & JSXBase.HTMLAttributes<HTMLStencilFormInputElement>;
        }
    }
}
